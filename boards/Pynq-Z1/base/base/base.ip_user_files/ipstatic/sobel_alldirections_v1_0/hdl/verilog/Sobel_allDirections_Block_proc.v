// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Sobel_allDirections_Block_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        img_0_rows_V_out_din,
        img_0_rows_V_out_full_n,
        img_0_rows_V_out_write,
        img_0_cols_V_out_din,
        img_0_cols_V_out_full_n,
        img_0_cols_V_out_write,
        img_1_rows_V_out_din,
        img_1_rows_V_out_full_n,
        img_1_rows_V_out_write,
        img_1_cols_V_out_din,
        img_1_cols_V_out_full_n,
        img_1_cols_V_out_write,
        img_2_rows_V_out_din,
        img_2_rows_V_out_full_n,
        img_2_rows_V_out_write,
        img_2_cols_V_out_din,
        img_2_cols_V_out_full_n,
        img_2_cols_V_out_write,
        img_3_rows_V_out_din,
        img_3_rows_V_out_full_n,
        img_3_rows_V_out_write,
        img_3_cols_V_out_din,
        img_3_cols_V_out_full_n,
        img_3_cols_V_out_write,
        img_4_rows_V_out_din,
        img_4_rows_V_out_full_n,
        img_4_rows_V_out_write,
        img_4_cols_V_out_din,
        img_4_cols_V_out_full_n,
        img_4_cols_V_out_write,
        img_5_rows_V_out_din,
        img_5_rows_V_out_full_n,
        img_5_rows_V_out_write,
        img_5_cols_V_out_din,
        img_5_cols_V_out_full_n,
        img_5_cols_V_out_write,
        img_6_rows_V_out_din,
        img_6_rows_V_out_full_n,
        img_6_rows_V_out_write,
        img_6_cols_V_out_din,
        img_6_cols_V_out_full_n,
        img_6_cols_V_out_write,
        img_7_rows_V_out_din,
        img_7_rows_V_out_full_n,
        img_7_rows_V_out_write,
        img_7_cols_V_out_din,
        img_7_cols_V_out_full_n,
        img_7_cols_V_out_write,
        img_9_rows_V_out_din,
        img_9_rows_V_out_full_n,
        img_9_rows_V_out_write,
        img_9_cols_V_out_din,
        img_9_cols_V_out_full_n,
        img_9_cols_V_out_write,
        img_11_rows_V_out_din,
        img_11_rows_V_out_full_n,
        img_11_rows_V_out_write,
        img_11_cols_V_out_din,
        img_11_cols_V_out_full_n,
        img_11_cols_V_out_write
);

parameter    ap_ST_st1_fsm_0 = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv12_438 = 12'b10000111000;
parameter    ap_const_lv12_780 = 12'b11110000000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [11:0] img_0_rows_V_out_din;
input   img_0_rows_V_out_full_n;
output   img_0_rows_V_out_write;
output  [11:0] img_0_cols_V_out_din;
input   img_0_cols_V_out_full_n;
output   img_0_cols_V_out_write;
output  [11:0] img_1_rows_V_out_din;
input   img_1_rows_V_out_full_n;
output   img_1_rows_V_out_write;
output  [11:0] img_1_cols_V_out_din;
input   img_1_cols_V_out_full_n;
output   img_1_cols_V_out_write;
output  [11:0] img_2_rows_V_out_din;
input   img_2_rows_V_out_full_n;
output   img_2_rows_V_out_write;
output  [11:0] img_2_cols_V_out_din;
input   img_2_cols_V_out_full_n;
output   img_2_cols_V_out_write;
output  [11:0] img_3_rows_V_out_din;
input   img_3_rows_V_out_full_n;
output   img_3_rows_V_out_write;
output  [11:0] img_3_cols_V_out_din;
input   img_3_cols_V_out_full_n;
output   img_3_cols_V_out_write;
output  [11:0] img_4_rows_V_out_din;
input   img_4_rows_V_out_full_n;
output   img_4_rows_V_out_write;
output  [11:0] img_4_cols_V_out_din;
input   img_4_cols_V_out_full_n;
output   img_4_cols_V_out_write;
output  [11:0] img_5_rows_V_out_din;
input   img_5_rows_V_out_full_n;
output   img_5_rows_V_out_write;
output  [11:0] img_5_cols_V_out_din;
input   img_5_cols_V_out_full_n;
output   img_5_cols_V_out_write;
output  [11:0] img_6_rows_V_out_din;
input   img_6_rows_V_out_full_n;
output   img_6_rows_V_out_write;
output  [11:0] img_6_cols_V_out_din;
input   img_6_cols_V_out_full_n;
output   img_6_cols_V_out_write;
output  [11:0] img_7_rows_V_out_din;
input   img_7_rows_V_out_full_n;
output   img_7_rows_V_out_write;
output  [11:0] img_7_cols_V_out_din;
input   img_7_cols_V_out_full_n;
output   img_7_cols_V_out_write;
output  [11:0] img_9_rows_V_out_din;
input   img_9_rows_V_out_full_n;
output   img_9_rows_V_out_write;
output  [11:0] img_9_cols_V_out_din;
input   img_9_cols_V_out_full_n;
output   img_9_cols_V_out_write;
output  [11:0] img_11_rows_V_out_din;
input   img_11_rows_V_out_full_n;
output   img_11_rows_V_out_write;
output  [11:0] img_11_cols_V_out_din;
input   img_11_cols_V_out_full_n;
output   img_11_cols_V_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_0_rows_V_out_write;
reg img_0_cols_V_out_write;
reg img_1_rows_V_out_write;
reg img_1_cols_V_out_write;
reg img_2_rows_V_out_write;
reg img_2_cols_V_out_write;
reg img_3_rows_V_out_write;
reg img_3_cols_V_out_write;
reg img_4_rows_V_out_write;
reg img_4_cols_V_out_write;
reg img_5_rows_V_out_write;
reg img_5_cols_V_out_write;
reg img_6_rows_V_out_write;
reg img_6_cols_V_out_write;
reg img_7_rows_V_out_write;
reg img_7_cols_V_out_write;
reg img_9_rows_V_out_write;
reg img_9_cols_V_out_write;
reg img_11_rows_V_out_write;
reg img_11_cols_V_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_19;
reg    img_0_rows_V_out_blk_n;
reg    img_0_cols_V_out_blk_n;
reg    img_1_rows_V_out_blk_n;
reg    img_1_cols_V_out_blk_n;
reg    img_2_rows_V_out_blk_n;
reg    img_2_cols_V_out_blk_n;
reg    img_3_rows_V_out_blk_n;
reg    img_3_cols_V_out_blk_n;
reg    img_4_rows_V_out_blk_n;
reg    img_4_cols_V_out_blk_n;
reg    img_5_rows_V_out_blk_n;
reg    img_5_cols_V_out_blk_n;
reg    img_6_rows_V_out_blk_n;
reg    img_6_cols_V_out_blk_n;
reg    img_7_rows_V_out_blk_n;
reg    img_7_cols_V_out_blk_n;
reg    img_9_rows_V_out_blk_n;
reg    img_9_cols_V_out_blk_n;
reg    img_11_rows_V_out_blk_n;
reg    img_11_cols_V_out_blk_n;
reg    ap_sig_170;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_170)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | ((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_170))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_170)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_19) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        img_0_cols_V_out_blk_n = img_0_cols_V_out_full_n;
    end else begin
        img_0_cols_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_170)) begin
        img_0_cols_V_out_write = 1'b1;
    end else begin
        img_0_cols_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        img_0_rows_V_out_blk_n = img_0_rows_V_out_full_n;
    end else begin
        img_0_rows_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_170)) begin
        img_0_rows_V_out_write = 1'b1;
    end else begin
        img_0_rows_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        img_11_cols_V_out_blk_n = img_11_cols_V_out_full_n;
    end else begin
        img_11_cols_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_170)) begin
        img_11_cols_V_out_write = 1'b1;
    end else begin
        img_11_cols_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        img_11_rows_V_out_blk_n = img_11_rows_V_out_full_n;
    end else begin
        img_11_rows_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_170)) begin
        img_11_rows_V_out_write = 1'b1;
    end else begin
        img_11_rows_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        img_1_cols_V_out_blk_n = img_1_cols_V_out_full_n;
    end else begin
        img_1_cols_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_170)) begin
        img_1_cols_V_out_write = 1'b1;
    end else begin
        img_1_cols_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        img_1_rows_V_out_blk_n = img_1_rows_V_out_full_n;
    end else begin
        img_1_rows_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_170)) begin
        img_1_rows_V_out_write = 1'b1;
    end else begin
        img_1_rows_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        img_2_cols_V_out_blk_n = img_2_cols_V_out_full_n;
    end else begin
        img_2_cols_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_170)) begin
        img_2_cols_V_out_write = 1'b1;
    end else begin
        img_2_cols_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        img_2_rows_V_out_blk_n = img_2_rows_V_out_full_n;
    end else begin
        img_2_rows_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_170)) begin
        img_2_rows_V_out_write = 1'b1;
    end else begin
        img_2_rows_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        img_3_cols_V_out_blk_n = img_3_cols_V_out_full_n;
    end else begin
        img_3_cols_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_170)) begin
        img_3_cols_V_out_write = 1'b1;
    end else begin
        img_3_cols_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        img_3_rows_V_out_blk_n = img_3_rows_V_out_full_n;
    end else begin
        img_3_rows_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_170)) begin
        img_3_rows_V_out_write = 1'b1;
    end else begin
        img_3_rows_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        img_4_cols_V_out_blk_n = img_4_cols_V_out_full_n;
    end else begin
        img_4_cols_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_170)) begin
        img_4_cols_V_out_write = 1'b1;
    end else begin
        img_4_cols_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        img_4_rows_V_out_blk_n = img_4_rows_V_out_full_n;
    end else begin
        img_4_rows_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_170)) begin
        img_4_rows_V_out_write = 1'b1;
    end else begin
        img_4_rows_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        img_5_cols_V_out_blk_n = img_5_cols_V_out_full_n;
    end else begin
        img_5_cols_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_170)) begin
        img_5_cols_V_out_write = 1'b1;
    end else begin
        img_5_cols_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        img_5_rows_V_out_blk_n = img_5_rows_V_out_full_n;
    end else begin
        img_5_rows_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_170)) begin
        img_5_rows_V_out_write = 1'b1;
    end else begin
        img_5_rows_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        img_6_cols_V_out_blk_n = img_6_cols_V_out_full_n;
    end else begin
        img_6_cols_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_170)) begin
        img_6_cols_V_out_write = 1'b1;
    end else begin
        img_6_cols_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        img_6_rows_V_out_blk_n = img_6_rows_V_out_full_n;
    end else begin
        img_6_rows_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_170)) begin
        img_6_rows_V_out_write = 1'b1;
    end else begin
        img_6_rows_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        img_7_cols_V_out_blk_n = img_7_cols_V_out_full_n;
    end else begin
        img_7_cols_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_170)) begin
        img_7_cols_V_out_write = 1'b1;
    end else begin
        img_7_cols_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        img_7_rows_V_out_blk_n = img_7_rows_V_out_full_n;
    end else begin
        img_7_rows_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_170)) begin
        img_7_rows_V_out_write = 1'b1;
    end else begin
        img_7_rows_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        img_9_cols_V_out_blk_n = img_9_cols_V_out_full_n;
    end else begin
        img_9_cols_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_170)) begin
        img_9_cols_V_out_write = 1'b1;
    end else begin
        img_9_cols_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        img_9_rows_V_out_blk_n = img_9_rows_V_out_full_n;
    end else begin
        img_9_rows_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_170)) begin
        img_9_rows_V_out_write = 1'b1;
    end else begin
        img_9_rows_V_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_170 = ((img_0_rows_V_out_full_n == 1'b0) | (img_0_cols_V_out_full_n == 1'b0) | (img_1_rows_V_out_full_n == 1'b0) | (img_1_cols_V_out_full_n == 1'b0) | (img_2_rows_V_out_full_n == 1'b0) | (img_2_cols_V_out_full_n == 1'b0) | (img_3_rows_V_out_full_n == 1'b0) | (img_3_cols_V_out_full_n == 1'b0) | (img_4_rows_V_out_full_n == 1'b0) | (img_4_cols_V_out_full_n == 1'b0) | (img_5_rows_V_out_full_n == 1'b0) | (img_5_cols_V_out_full_n == 1'b0) | (img_6_rows_V_out_full_n == 1'b0) | (img_6_cols_V_out_full_n == 1'b0) | (img_7_rows_V_out_full_n == 1'b0) | (img_7_cols_V_out_full_n == 1'b0) | (img_9_rows_V_out_full_n == 1'b0) | (img_9_cols_V_out_full_n == 1'b0) | (img_11_rows_V_out_full_n == 1'b0) | (img_11_cols_V_out_full_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_sig_19 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

assign img_0_cols_V_out_din = ap_const_lv12_780;

assign img_0_rows_V_out_din = ap_const_lv12_438;

assign img_11_cols_V_out_din = ap_const_lv12_780;

assign img_11_rows_V_out_din = ap_const_lv12_438;

assign img_1_cols_V_out_din = ap_const_lv12_780;

assign img_1_rows_V_out_din = ap_const_lv12_438;

assign img_2_cols_V_out_din = ap_const_lv12_780;

assign img_2_rows_V_out_din = ap_const_lv12_438;

assign img_3_cols_V_out_din = ap_const_lv12_780;

assign img_3_rows_V_out_din = ap_const_lv12_438;

assign img_4_cols_V_out_din = ap_const_lv12_780;

assign img_4_rows_V_out_din = ap_const_lv12_438;

assign img_5_cols_V_out_din = ap_const_lv12_780;

assign img_5_rows_V_out_din = ap_const_lv12_438;

assign img_6_cols_V_out_din = ap_const_lv12_780;

assign img_6_rows_V_out_din = ap_const_lv12_438;

assign img_7_cols_V_out_din = ap_const_lv12_780;

assign img_7_rows_V_out_din = ap_const_lv12_438;

assign img_9_cols_V_out_din = ap_const_lv12_780;

assign img_9_rows_V_out_din = ap_const_lv12_438;

endmodule //Sobel_allDirections_Block_proc
