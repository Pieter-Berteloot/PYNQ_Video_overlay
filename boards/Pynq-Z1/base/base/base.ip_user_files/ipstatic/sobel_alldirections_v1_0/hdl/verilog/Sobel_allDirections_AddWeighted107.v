// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Sobel_allDirections_AddWeighted107 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        src1_cols_V_dout,
        src1_cols_V_empty_n,
        src1_cols_V_read,
        src1_data_stream_V_dout,
        src1_data_stream_V_empty_n,
        src1_data_stream_V_read,
        src2_data_stream_V_dout,
        src2_data_stream_V_empty_n,
        src2_data_stream_V_read,
        beta_dout,
        beta_empty_n,
        beta_read,
        dst_data_stream_V_din,
        dst_data_stream_V_full_n,
        dst_data_stream_V_write
);

parameter    ap_ST_st1_fsm_0 = 4'b1;
parameter    ap_ST_st2_fsm_1 = 4'b10;
parameter    ap_ST_pp0_stg0_fsm_2 = 4'b100;
parameter    ap_ST_st6_fsm_3 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv12_0 = 12'b000000000000;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv12_1 = 12'b1;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv8_FF = 8'b11111111;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [11:0] src1_cols_V_dout;
input   src1_cols_V_empty_n;
output   src1_cols_V_read;
input  [11:0] src1_data_stream_V_dout;
input   src1_data_stream_V_empty_n;
output   src1_data_stream_V_read;
input  [7:0] src2_data_stream_V_dout;
input   src2_data_stream_V_empty_n;
output   src2_data_stream_V_read;
input  [7:0] beta_dout;
input   beta_empty_n;
output   beta_read;
output  [7:0] dst_data_stream_V_din;
input   dst_data_stream_V_full_n;
output   dst_data_stream_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src1_cols_V_read;
reg src1_data_stream_V_read;
reg src2_data_stream_V_read;
reg beta_read;
reg dst_data_stream_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_22;
reg    src1_cols_V_blk_n;
reg    src1_data_stream_V_blk_n;
reg    src2_data_stream_V_blk_n;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_2;
reg    ap_sig_62;
reg    ap_reg_ppiten_pp0_it1;
reg    ap_reg_ppiten_pp0_it0;
reg    ap_reg_ppiten_pp0_it2;
reg   [0:0] exitcond_i_i_i_reg_200;
reg    beta_blk_n;
reg    dst_data_stream_V_blk_n;
reg   [0:0] ap_reg_ppstg_exitcond_i_i_i_reg_200_pp0_iter1;
reg   [11:0] p_1_i_i_i_reg_112;
reg   [11:0] rows_V_reg_181;
reg    ap_sig_89;
reg   [11:0] cols_V_reg_186;
wire   [0:0] exitcond1_i_i_i_fu_123_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_101;
wire   [11:0] i_V_fu_128_p2;
reg   [11:0] i_V_reg_195;
wire   [0:0] exitcond_i_i_i_fu_134_p2;
reg    ap_sig_111;
reg    ap_sig_115;
wire   [11:0] j_V_fu_139_p2;
wire   [7:0] p_Val2_s_fu_173_p3;
reg   [7:0] p_Val2_s_reg_209;
reg   [11:0] p_i_i_i_reg_101;
reg    ap_sig_cseq_ST_st6_fsm_3;
reg    ap_sig_143;
wire   [8:0] r_V_i_cast1_i_i_cast_fu_145_p1;
wire   [8:0] lhs_V_1_i_cast_i_i_cast_fu_149_p1;
wire   [8:0] sum_V_fu_159_p2;
wire   [0:0] overflow_fu_165_p3;
wire   [7:0] p_Val2_9_fu_153_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'b1;
#0 ap_reg_ppiten_pp0_it1 = 1'b0;
#0 ap_reg_ppiten_pp0_it0 = 1'b0;
#0 ap_reg_ppiten_pp0_it2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond1_i_i_i_fu_123_p2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~(((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_111) | ((1'b1 == ap_reg_ppiten_pp0_it2) & ap_sig_115)) & ~(1'b0 == exitcond_i_i_i_fu_134_p2))) begin
            ap_reg_ppiten_pp0_it0 <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond1_i_i_i_fu_123_p2))) begin
            ap_reg_ppiten_pp0_it0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~(((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_111) | ((1'b1 == ap_reg_ppiten_pp0_it2) & ap_sig_115)) & (1'b0 == exitcond_i_i_i_fu_134_p2))) begin
            ap_reg_ppiten_pp0_it1 <= 1'b1;
        end else if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond1_i_i_i_fu_123_p2)) | ((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~(((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_111) | ((1'b1 == ap_reg_ppiten_pp0_it2) & ap_sig_115)) & ~(1'b0 == exitcond_i_i_i_fu_134_p2)))) begin
            ap_reg_ppiten_pp0_it1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_111) | ((1'b1 == ap_reg_ppiten_pp0_it2) & ap_sig_115))) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond1_i_i_i_fu_123_p2))) begin
            ap_reg_ppiten_pp0_it2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (1'b1 == ap_reg_ppiten_pp0_it0) & ~(((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_111) | ((1'b1 == ap_reg_ppiten_pp0_it2) & ap_sig_115)) & (1'b0 == exitcond_i_i_i_fu_134_p2))) begin
        p_1_i_i_i_reg_112 <= j_V_fu_139_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond1_i_i_i_fu_123_p2))) begin
        p_1_i_i_i_reg_112 <= ap_const_lv12_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_3)) begin
        p_i_i_i_reg_101 <= i_V_reg_195;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_89)) begin
        p_i_i_i_reg_101 <= ap_const_lv12_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~(((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_111) | ((1'b1 == ap_reg_ppiten_pp0_it2) & ap_sig_115)))) begin
        ap_reg_ppstg_exitcond_i_i_i_reg_200_pp0_iter1 <= exitcond_i_i_i_reg_200;
        exitcond_i_i_i_reg_200 <= exitcond_i_i_i_fu_134_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_89)) begin
        cols_V_reg_186 <= src1_data_stream_V_dout;
        rows_V_reg_181 <= src1_cols_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_V_reg_195 <= i_V_fu_128_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (exitcond_i_i_i_reg_200 == 1'b0) & ~(((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_111) | ((1'b1 == ap_reg_ppiten_pp0_it2) & ap_sig_115)))) begin
        p_Val2_s_reg_209 <= p_Val2_s_fu_173_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond1_i_i_i_fu_123_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond1_i_i_i_fu_123_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_62) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_101) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_143) begin
        ap_sig_cseq_ST_st6_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_i_i_i_reg_200 == 1'b0))) begin
        beta_blk_n = beta_empty_n;
    end else begin
        beta_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_i_i_i_reg_200 == 1'b0) & ~(((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_111) | ((1'b1 == ap_reg_ppiten_pp0_it2) & ap_sig_115)))) begin
        beta_read = 1'b1;
    end else begin
        beta_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_reg_ppiten_pp0_it2) & (1'b0 == ap_reg_ppstg_exitcond_i_i_i_reg_200_pp0_iter1))) begin
        dst_data_stream_V_blk_n = dst_data_stream_V_full_n;
    end else begin
        dst_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_reg_ppiten_pp0_it2) & (1'b0 == ap_reg_ppstg_exitcond_i_i_i_reg_200_pp0_iter1) & ~(((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_111) | ((1'b1 == ap_reg_ppiten_pp0_it2) & ap_sig_115)))) begin
        dst_data_stream_V_write = 1'b1;
    end else begin
        dst_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        src1_cols_V_blk_n = src1_cols_V_empty_n;
    end else begin
        src1_cols_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_89)) begin
        src1_cols_V_read = 1'b1;
    end else begin
        src1_cols_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        src1_data_stream_V_blk_n = src1_data_stream_V_empty_n;
    end else begin
        src1_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_89)) begin
        src1_data_stream_V_read = 1'b1;
    end else begin
        src1_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_i_i_i_reg_200 == 1'b0))) begin
        src2_data_stream_V_blk_n = src2_data_stream_V_empty_n;
    end else begin
        src2_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_i_i_i_reg_200 == 1'b0) & ~(((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_111) | ((1'b1 == ap_reg_ppiten_pp0_it2) & ap_sig_115)))) begin
        src2_data_stream_V_read = 1'b1;
    end else begin
        src2_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~ap_sig_89) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(1'b0 == exitcond1_i_i_i_fu_123_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end
        end
        ap_ST_pp0_stg0_fsm_2 : begin
            if ((~((1'b1 == ap_reg_ppiten_pp0_it2) & ~(((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_111) | ((1'b1 == ap_reg_ppiten_pp0_it2) & ap_sig_115)) & ~(1'b1 == ap_reg_ppiten_pp0_it1)) & ~((1'b1 == ap_reg_ppiten_pp0_it0) & ~(((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_111) | ((1'b1 == ap_reg_ppiten_pp0_it2) & ap_sig_115)) & ~(1'b0 == exitcond_i_i_i_fu_134_p2) & ~(1'b1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end else if ((((1'b1 == ap_reg_ppiten_pp0_it2) & ~(((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_111) | ((1'b1 == ap_reg_ppiten_pp0_it2) & ap_sig_115)) & ~(1'b1 == ap_reg_ppiten_pp0_it1)) | ((1'b1 == ap_reg_ppiten_pp0_it0) & ~(((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_111) | ((1'b1 == ap_reg_ppiten_pp0_it2) & ap_sig_115)) & ~(1'b0 == exitcond_i_i_i_fu_134_p2) & ~(1'b1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_st6_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end
        end
        ap_ST_st6_fsm_3 : begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_101 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_111 = (((exitcond_i_i_i_reg_200 == 1'b0) & (src2_data_stream_V_empty_n == 1'b0)) | ((exitcond_i_i_i_reg_200 == 1'b0) & (beta_empty_n == 1'b0)));
end

always @ (*) begin
    ap_sig_115 = ((1'b0 == ap_reg_ppstg_exitcond_i_i_i_reg_200_pp0_iter1) & (dst_data_stream_V_full_n == 1'b0));
end

always @ (*) begin
    ap_sig_143 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_22 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_62 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_89 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | (src1_cols_V_empty_n == 1'b0) | (src1_data_stream_V_empty_n == 1'b0));
end

assign dst_data_stream_V_din = p_Val2_s_reg_209;

assign exitcond1_i_i_i_fu_123_p2 = ((p_i_i_i_reg_101 == rows_V_reg_181) ? 1'b1 : 1'b0);

assign exitcond_i_i_i_fu_134_p2 = ((p_1_i_i_i_reg_112 == cols_V_reg_186) ? 1'b1 : 1'b0);

assign i_V_fu_128_p2 = (p_i_i_i_reg_101 + ap_const_lv12_1);

assign j_V_fu_139_p2 = (p_1_i_i_i_reg_112 + ap_const_lv12_1);

assign lhs_V_1_i_cast_i_i_cast_fu_149_p1 = src2_data_stream_V_dout;

assign overflow_fu_165_p3 = sum_V_fu_159_p2[ap_const_lv32_8];

assign p_Val2_9_fu_153_p2 = (src2_data_stream_V_dout + beta_dout);

assign p_Val2_s_fu_173_p3 = ((overflow_fu_165_p3[0:0] === 1'b1) ? ap_const_lv8_FF : p_Val2_9_fu_153_p2);

assign r_V_i_cast1_i_i_cast_fu_145_p1 = beta_dout;

assign sum_V_fu_159_p2 = (r_V_i_cast1_i_i_cast_fu_145_p1 + lhs_V_1_i_cast_i_i_cast_fu_149_p1);

endmodule //Sobel_allDirections_AddWeighted107
