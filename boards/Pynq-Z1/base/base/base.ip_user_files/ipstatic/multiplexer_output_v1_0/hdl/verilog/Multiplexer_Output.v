// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Multiplexer_Output,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.368000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=58,HLS_SYN_LUT=66}" *)

module Multiplexer_Output (
        ap_clk,
        ap_rst_n,
        in_data0_TDATA,
        in_data0_TVALID,
        in_data0_TREADY,
        in_data0_TUSER,
        in_data0_TLAST,
        in_data1_TDATA,
        in_data1_TVALID,
        in_data1_TREADY,
        in_data1_TUSER,
        in_data1_TLAST,
        out_data_TDATA,
        out_data_TVALID,
        out_data_TREADY,
        out_data_TUSER,
        out_data_TLAST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        control,
        ap_rst_n_control
);

parameter    ap_ST_pp0_stg0_fsm_0 = 1'b1;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv24_0 = 24'b000000000000000000000000;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input  [7:0] in_data0_TDATA;
input   in_data0_TVALID;
output   in_data0_TREADY;
input  [0:0] in_data0_TUSER;
input  [0:0] in_data0_TLAST;
input  [23:0] in_data1_TDATA;
input   in_data1_TVALID;
output   in_data1_TREADY;
input  [0:0] in_data1_TUSER;
input  [0:0] in_data1_TLAST;
output  [23:0] out_data_TDATA;
output   out_data_TVALID;
input   out_data_TREADY;
output  [0:0] out_data_TUSER;
output  [0:0] out_data_TLAST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
input   control;
input   ap_rst_n_control;

reg in_data0_TREADY;
reg in_data1_TREADY;
reg out_data_TVALID;

reg    ap_rst_n_inv;
wire   [7:0] mode;
reg   [7:0] mode_0_data_reg;
reg    mode_0_vld_reg;
reg    mode_0_ack_out;
reg    in_data0_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_0;
reg    ap_sig_56;
reg    ap_reg_ppiten_pp0_it1;
reg    in_data1_TDATA_blk_n;
reg    out_data_TDATA_blk_n;
reg    ap_rst_n_control_inv;
reg   [0:0] empty_reg_132_1;
reg   [0:0] empty_reg_132_2;
reg    ap_sig_116;
reg    ap_sig_ioackin_out_data_TREADY;
reg   [0:0] inUser_V_1_reg_138;
reg    ap_reg_ioackin_out_data_TREADY;
wire   [0:0] tmp_1_fu_110_p2;
reg   [0:0] ap_NS_fsm;
wire    ap_sig_pprstidle_pp0;

// power-on initialization
initial begin
#0 mode_0_data_reg = 8'b00000000;
#0 mode_0_vld_reg = 1'b0;
#0 ap_CS_fsm = 1'b1;
#0 ap_reg_ppiten_pp0_it1 = 1'b0;
#0 ap_reg_ioackin_out_data_TREADY = 1'b0;
end

Multiplexer_Output_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
Multiplexer_Output_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .mode(mode),
    .clk(control),
    .rst(ap_rst_n_control_inv)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_out_data_TREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b1 == ap_reg_ppiten_pp0_it1) & ~(((1'b1 == 1'b1) & ap_sig_116) | ((1'b1 == ap_reg_ppiten_pp0_it1) & (1'b0 == ap_sig_ioackin_out_data_TREADY))))) begin
            ap_reg_ioackin_out_data_TREADY <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b1 == ap_reg_ppiten_pp0_it1) & ~((1'b1 == 1'b1) & ap_sig_116) & (1'b1 == out_data_TREADY))) begin
            ap_reg_ioackin_out_data_TREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & ~(((1'b1 == 1'b1) & ap_sig_116) | ((1'b1 == ap_reg_ppiten_pp0_it1) & (1'b0 == ap_sig_ioackin_out_data_TREADY))))) begin
            ap_reg_ppiten_pp0_it1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & ~(((1'b1 == 1'b1) & ap_sig_116) | ((1'b1 == ap_reg_ppiten_pp0_it1) & (1'b0 == ap_sig_ioackin_out_data_TREADY))))) begin
        empty_reg_132_1 <= in_data0_TUSER;
        empty_reg_132_2 <= in_data0_TLAST;
        inUser_V_1_reg_138 <= in_data1_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == 1'b1) & (1'b0 == mode_0_vld_reg)) | ((1'b1 == 1'b1) & (1'b1 == mode_0_vld_reg) & (1'b1 == mode_0_ack_out)))) begin
        mode_0_data_reg <= mode;
    end
end

always @ (*) begin
    if (ap_sig_56) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_out_data_TREADY)) begin
        ap_sig_ioackin_out_data_TREADY = out_data_TREADY;
    end else begin
        ap_sig_ioackin_out_data_TREADY = 1'b1;
    end
end

assign ap_sig_pprstidle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b1 == 1'b1))) begin
        in_data0_TDATA_blk_n = in_data0_TVALID;
    end else begin
        in_data0_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b1 == 1'b1) & ~(((1'b1 == 1'b1) & ap_sig_116) | ((1'b1 == ap_reg_ppiten_pp0_it1) & (1'b0 == ap_sig_ioackin_out_data_TREADY))))) begin
        in_data0_TREADY = 1'b1;
    end else begin
        in_data0_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b1 == 1'b1))) begin
        in_data1_TDATA_blk_n = in_data1_TVALID;
    end else begin
        in_data1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b1 == 1'b1) & ~(((1'b1 == 1'b1) & ap_sig_116) | ((1'b1 == ap_reg_ppiten_pp0_it1) & (1'b0 == ap_sig_ioackin_out_data_TREADY))))) begin
        in_data1_TREADY = 1'b1;
    end else begin
        in_data1_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b1 == 1'b1) & ~(((1'b1 == 1'b1) & ap_sig_116) | ((1'b1 == ap_reg_ppiten_pp0_it1) & (1'b0 == ap_sig_ioackin_out_data_TREADY))))) begin
        mode_0_ack_out = 1'b1;
    end else begin
        mode_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b1 == ap_reg_ppiten_pp0_it1))) begin
        out_data_TDATA_blk_n = out_data_TREADY;
    end else begin
        out_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b1 == ap_reg_ppiten_pp0_it1) & ~((1'b1 == 1'b1) & ap_sig_116) & (1'b0 == ap_reg_ioackin_out_data_TREADY))) begin
        out_data_TVALID = 1'b1;
    end else begin
        out_data_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_pp0_stg0_fsm_0 : begin
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_rst_n_control_inv = ~ap_rst_n_control;
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

always @ (*) begin
    ap_sig_116 = ((in_data0_TVALID == 1'b0) | (in_data1_TVALID == 1'b0));
end

always @ (*) begin
    ap_sig_56 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

assign out_data_TDATA = ap_const_lv24_0;

assign out_data_TLAST = ((tmp_1_fu_110_p2[0:0] === 1'b1) ? empty_reg_132_2 : inUser_V_1_reg_138);

assign out_data_TUSER = ((tmp_1_fu_110_p2[0:0] === 1'b1) ? empty_reg_132_1 : inUser_V_1_reg_138);

assign tmp_1_fu_110_p2 = ((mode_0_data_reg == ap_const_lv8_0) ? 1'b1 : 1'b0);

endmodule //Multiplexer_Output
