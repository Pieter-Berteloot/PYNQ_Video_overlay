// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module filter_Block_crit_edge_i5791722_pro (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        coef_array1_V_address0,
        coef_array1_V_ce0,
        coef_array1_V_we0,
        coef_array1_V_d0,
        coef_array1_V_address1,
        coef_array1_V_ce1,
        coef_array1_V_we1,
        coef_array1_V_d1,
        coef_array2_V_address0,
        coef_array2_V_ce0,
        coef_array2_V_we0,
        coef_array2_V_d0,
        coef_array2_V_address1,
        coef_array2_V_ce1,
        coef_array2_V_we1,
        coef_array2_V_d1
);

parameter    ap_ST_st1_fsm_0 = 5'b1;
parameter    ap_ST_st2_fsm_1 = 5'b10;
parameter    ap_ST_st3_fsm_2 = 5'b100;
parameter    ap_ST_st4_fsm_3 = 5'b1000;
parameter    ap_ST_st5_fsm_4 = 5'b10000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_1 = 64'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv64_2 = 64'b10;
parameter    ap_const_lv64_3 = 64'b11;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv64_4 = 64'b100;
parameter    ap_const_lv64_5 = 64'b101;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv64_6 = 64'b110;
parameter    ap_const_lv64_7 = 64'b111;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv64_8 = 64'b1000;
parameter    ap_const_lv10_1D = 10'b11101;
parameter    ap_const_lv10_96 = 10'b10010110;
parameter    ap_const_lv10_4D = 10'b1001101;
parameter    ap_const_lv10_100 = 10'b100000000;
parameter    ap_const_lv10_0 = 10'b0000000000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [3:0] coef_array1_V_address0;
output   coef_array1_V_ce0;
output   coef_array1_V_we0;
output  [9:0] coef_array1_V_d0;
output  [3:0] coef_array1_V_address1;
output   coef_array1_V_ce1;
output   coef_array1_V_we1;
output  [9:0] coef_array1_V_d1;
output  [3:0] coef_array2_V_address0;
output   coef_array2_V_ce0;
output   coef_array2_V_we0;
output  [9:0] coef_array2_V_d0;
output  [3:0] coef_array2_V_address1;
output   coef_array2_V_ce1;
output   coef_array2_V_we1;
output  [9:0] coef_array2_V_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] coef_array1_V_address0;
reg coef_array1_V_ce0;
reg coef_array1_V_we0;
reg[9:0] coef_array1_V_d0;
reg[3:0] coef_array1_V_address1;
reg coef_array1_V_ce1;
reg coef_array1_V_we1;
reg[9:0] coef_array1_V_d1;
reg[3:0] coef_array2_V_address0;
reg coef_array2_V_ce0;
reg coef_array2_V_we0;
reg[9:0] coef_array2_V_d0;
reg[3:0] coef_array2_V_address1;
reg coef_array2_V_ce1;
reg coef_array2_V_we1;
reg[9:0] coef_array2_V_d1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_23;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_62;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_75;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_88;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_101;
reg    ap_sig_110;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_23) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_62) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_75) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_88) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_101) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        coef_array1_V_address0 = ap_const_lv64_8;
    end else if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        coef_array1_V_address0 = ap_const_lv64_6;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        coef_array1_V_address0 = ap_const_lv64_4;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        coef_array1_V_address0 = ap_const_lv64_1;
    end else if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        coef_array1_V_address0 = ap_const_lv64_0;
    end else begin
        coef_array1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        coef_array1_V_address1 = ap_const_lv64_7;
    end else if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        coef_array1_V_address1 = ap_const_lv64_5;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        coef_array1_V_address1 = ap_const_lv64_3;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        coef_array1_V_address1 = ap_const_lv64_2;
    end else begin
        coef_array1_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4) | ((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_110))) begin
        coef_array1_V_ce0 = 1'b1;
    end else begin
        coef_array1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        coef_array1_V_ce1 = 1'b1;
    end else begin
        coef_array1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        coef_array1_V_d0 = ap_const_lv10_4D;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st3_fsm_2))) begin
        coef_array1_V_d0 = ap_const_lv10_96;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3))) begin
        coef_array1_V_d0 = ap_const_lv10_1D;
    end else begin
        coef_array1_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        coef_array1_V_d1 = ap_const_lv10_96;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        coef_array1_V_d1 = ap_const_lv10_1D;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3))) begin
        coef_array1_V_d1 = ap_const_lv10_4D;
    end else begin
        coef_array1_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4) | ((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_110))) begin
        coef_array1_V_we0 = 1'b1;
    end else begin
        coef_array1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        coef_array1_V_we1 = 1'b1;
    end else begin
        coef_array1_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        coef_array2_V_address0 = ap_const_lv64_8;
    end else if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        coef_array2_V_address0 = ap_const_lv64_6;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        coef_array2_V_address0 = ap_const_lv64_4;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        coef_array2_V_address0 = ap_const_lv64_1;
    end else if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        coef_array2_V_address0 = ap_const_lv64_0;
    end else begin
        coef_array2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        coef_array2_V_address1 = ap_const_lv64_7;
    end else if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        coef_array2_V_address1 = ap_const_lv64_5;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        coef_array2_V_address1 = ap_const_lv64_3;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        coef_array2_V_address1 = ap_const_lv64_2;
    end else begin
        coef_array2_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4) | ((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_110))) begin
        coef_array2_V_ce0 = 1'b1;
    end else begin
        coef_array2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        coef_array2_V_ce1 = 1'b1;
    end else begin
        coef_array2_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        coef_array2_V_d0 = ap_const_lv10_0;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3))) begin
        coef_array2_V_d0 = ap_const_lv10_100;
    end else begin
        coef_array2_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        coef_array2_V_d1 = ap_const_lv10_100;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        coef_array2_V_d1 = ap_const_lv10_0;
    end else begin
        coef_array2_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4) | ((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_110))) begin
        coef_array2_V_we0 = 1'b1;
    end else begin
        coef_array2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        coef_array2_V_we1 = 1'b1;
    end else begin
        coef_array2_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~ap_sig_110) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_101 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_110 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_sig_23 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_62 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_75 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_88 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

endmodule //filter_Block_crit_edge_i5791722_pro
