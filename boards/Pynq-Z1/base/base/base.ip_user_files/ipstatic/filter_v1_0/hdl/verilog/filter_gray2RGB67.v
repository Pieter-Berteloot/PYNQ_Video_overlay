// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module filter_gray2RGB67 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        img_in_data_stream_V_dout,
        img_in_data_stream_V_empty_n,
        img_in_data_stream_V_read,
        img_in_data_stream_V1_dout,
        img_in_data_stream_V1_empty_n,
        img_in_data_stream_V1_read,
        img_in_data_stream_V2_dout,
        img_in_data_stream_V2_empty_n,
        img_in_data_stream_V2_read,
        img_out_data_stream_V_din,
        img_out_data_stream_V_full_n,
        img_out_data_stream_V_write,
        img_out_data_stream_V3_din,
        img_out_data_stream_V3_full_n,
        img_out_data_stream_V3_write,
        img_out_data_stream_V4_din,
        img_out_data_stream_V4_full_n,
        img_out_data_stream_V4_write
);

parameter    ap_ST_st1_fsm_0 = 6'b1;
parameter    ap_ST_st2_fsm_1 = 6'b10;
parameter    ap_ST_st3_fsm_2 = 6'b100;
parameter    ap_ST_st4_fsm_3 = 6'b1000;
parameter    ap_ST_st5_fsm_4 = 6'b10000;
parameter    ap_ST_st6_fsm_5 = 6'b100000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv21_0 = 21'b000000000000000000000;
parameter    ap_const_lv10_1D = 10'b11101;
parameter    ap_const_lv10_4D = 10'b1001101;
parameter    ap_const_lv10_96 = 10'b10010110;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_2 = 4'b10;
parameter    ap_const_lv4_4 = 4'b100;
parameter    ap_const_lv4_6 = 4'b110;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv4_3 = 4'b11;
parameter    ap_const_lv4_5 = 4'b101;
parameter    ap_const_lv4_7 = 4'b111;
parameter    ap_const_lv16_96 = 16'b10010110;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv21_1 = 21'b1;
parameter    ap_const_lv21_1FA3FF = 21'b111111010001111111111;
parameter    ap_const_lv14_1D = 14'b11101;
parameter    ap_const_lv16_4D = 16'b1001101;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] img_in_data_stream_V_dout;
input   img_in_data_stream_V_empty_n;
output   img_in_data_stream_V_read;
input  [7:0] img_in_data_stream_V1_dout;
input   img_in_data_stream_V1_empty_n;
output   img_in_data_stream_V1_read;
input  [7:0] img_in_data_stream_V2_dout;
input   img_in_data_stream_V2_empty_n;
output   img_in_data_stream_V2_read;
output  [7:0] img_out_data_stream_V_din;
input   img_out_data_stream_V_full_n;
output   img_out_data_stream_V_write;
output  [7:0] img_out_data_stream_V3_din;
input   img_out_data_stream_V3_full_n;
output   img_out_data_stream_V3_write;
output  [7:0] img_out_data_stream_V4_din;
input   img_out_data_stream_V4_full_n;
output   img_out_data_stream_V4_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_in_data_stream_V_read;
reg img_in_data_stream_V1_read;
reg img_in_data_stream_V2_read;
reg img_out_data_stream_V_write;
reg img_out_data_stream_V3_write;
reg img_out_data_stream_V4_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_24;
reg   [3:0] coef_array1_V_address0;
reg    coef_array1_V_ce0;
reg    coef_array1_V_we0;
reg   [9:0] coef_array1_V_d0;
reg   [3:0] coef_array1_V_address1;
reg    coef_array1_V_ce1;
reg    coef_array1_V_we1;
reg   [9:0] coef_array1_V_d1;
reg    img_in_data_stream_V_blk_n;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_78;
reg    img_in_data_stream_V1_blk_n;
reg    img_in_data_stream_V2_blk_n;
reg    img_out_data_stream_V_blk_n;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_89;
reg    img_out_data_stream_V3_blk_n;
reg    img_out_data_stream_V4_blk_n;
reg   [7:0] tmp_15_reg_231;
reg    ap_sig_102;
reg   [7:0] tmp_16_reg_236;
reg   [7:0] tmp_17_reg_241;
wire   [15:0] p_Val2_1_fu_178_p2;
reg   [15:0] p_Val2_1_reg_246;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_116;
wire   [15:0] grp_fu_216_p3;
reg   [15:0] tmp1_reg_251;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_125;
wire   [20:0] indvar_flatten_next_fu_202_p2;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_134;
reg   [20:0] indvar_flatten_reg_161;
reg    ap_sig_72;
wire   [0:0] exitcond_flatten_fu_208_p2;
reg    ap_sig_158;
wire   [7:0] p_Val2_1_fu_178_p0;
wire   [15:0] grp_fu_223_p3;
wire   [7:0] grp_fu_216_p0;
wire   [5:0] grp_fu_216_p1;
wire   [7:0] grp_fu_223_p0;
wire   [7:0] grp_fu_223_p1;
reg   [5:0] ap_NS_fsm;
wire   [13:0] grp_fu_216_p00;
wire   [15:0] grp_fu_223_p00;
wire   [15:0] p_Val2_1_fu_178_p00;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'b1;
end

filter_gray2RGB66_coef_array2_V #(
    .DataWidth( 10 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
coef_array1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(coef_array1_V_address0),
    .ce0(coef_array1_V_ce0),
    .we0(coef_array1_V_we0),
    .d0(coef_array1_V_d0),
    .address1(coef_array1_V_address1),
    .ce1(coef_array1_V_ce1),
    .we1(coef_array1_V_we1),
    .d1(coef_array1_V_d1)
);

filter_mac_muladd_8ns_6ns_16ns_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
filter_mac_muladd_8ns_6ns_16ns_16_1_U49(
    .din0(grp_fu_216_p0),
    .din1(grp_fu_216_p1),
    .din2(p_Val2_1_reg_246),
    .dout(grp_fu_216_p3)
);

filter_mac_muladd_8ns_8ns_16ns_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
filter_mac_muladd_8ns_8ns_16ns_16_1_U50(
    .din0(grp_fu_223_p0),
    .din1(grp_fu_223_p1),
    .din2(tmp1_reg_251),
    .dout(grp_fu_223_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(exitcond_flatten_fu_208_p2 == 1'b0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (exitcond_flatten_fu_208_p2 == 1'b0))) begin
        indvar_flatten_reg_161 <= indvar_flatten_next_fu_202_p2;
    end else if ((((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_72) | ((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(exitcond_flatten_fu_208_p2 == 1'b0)))) begin
        indvar_flatten_reg_161 <= ap_const_lv21_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        p_Val2_1_reg_246[15 : 1] <= p_Val2_1_fu_178_p2[15 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        tmp1_reg_251 <= grp_fu_216_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_102)) begin
        tmp_15_reg_231 <= img_in_data_stream_V_dout;
        tmp_16_reg_236 <= img_in_data_stream_V1_dout;
        tmp_17_reg_241 <= img_in_data_stream_V2_dout;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | ((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(exitcond_flatten_fu_208_p2 == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(exitcond_flatten_fu_208_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_24) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_78) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_116) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_125) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_89) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_134) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        coef_array1_V_address0 = ap_const_lv4_8;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        coef_array1_V_address0 = ap_const_lv4_6;
    end else if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        coef_array1_V_address0 = ap_const_lv4_4;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        coef_array1_V_address0 = ap_const_lv4_2;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        coef_array1_V_address0 = ap_const_lv4_0;
    end else begin
        coef_array1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        coef_array1_V_address1 = ap_const_lv4_7;
    end else if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        coef_array1_V_address1 = ap_const_lv4_5;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        coef_array1_V_address1 = ap_const_lv4_3;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        coef_array1_V_address1 = ap_const_lv4_1;
    end else begin
        coef_array1_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_102) | (1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3) | (1'b1 == ap_sig_cseq_ST_st6_fsm_5) | ((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & ~ap_sig_158))) begin
        coef_array1_V_ce0 = 1'b1;
    end else begin
        coef_array1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_102) | (1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3) | ((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & ~ap_sig_158))) begin
        coef_array1_V_ce1 = 1'b1;
    end else begin
        coef_array1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        coef_array1_V_d0 = ap_const_lv10_96;
    end else if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st6_fsm_5))) begin
        coef_array1_V_d0 = ap_const_lv10_4D;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        coef_array1_V_d0 = ap_const_lv10_1D;
    end else begin
        coef_array1_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        coef_array1_V_d1 = ap_const_lv10_4D;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        coef_array1_V_d1 = ap_const_lv10_1D;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        coef_array1_V_d1 = ap_const_lv10_96;
    end else begin
        coef_array1_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_102) | (1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3) | (1'b1 == ap_sig_cseq_ST_st6_fsm_5) | ((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & ~ap_sig_158))) begin
        coef_array1_V_we0 = 1'b1;
    end else begin
        coef_array1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_102) | (1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3) | ((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & ~ap_sig_158))) begin
        coef_array1_V_we1 = 1'b1;
    end else begin
        coef_array1_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_sig_cseq_ST_st2_fsm_1))) begin
        img_in_data_stream_V1_blk_n = img_in_data_stream_V1_empty_n;
    end else begin
        img_in_data_stream_V1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_102)) begin
        img_in_data_stream_V1_read = 1'b1;
    end else begin
        img_in_data_stream_V1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_sig_cseq_ST_st2_fsm_1))) begin
        img_in_data_stream_V2_blk_n = img_in_data_stream_V2_empty_n;
    end else begin
        img_in_data_stream_V2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_102)) begin
        img_in_data_stream_V2_read = 1'b1;
    end else begin
        img_in_data_stream_V2_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_sig_cseq_ST_st2_fsm_1))) begin
        img_in_data_stream_V_blk_n = img_in_data_stream_V_empty_n;
    end else begin
        img_in_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_102)) begin
        img_in_data_stream_V_read = 1'b1;
    end else begin
        img_in_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        img_out_data_stream_V3_blk_n = img_out_data_stream_V3_full_n;
    end else begin
        img_out_data_stream_V3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & ~ap_sig_158)) begin
        img_out_data_stream_V3_write = 1'b1;
    end else begin
        img_out_data_stream_V3_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        img_out_data_stream_V4_blk_n = img_out_data_stream_V4_full_n;
    end else begin
        img_out_data_stream_V4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & ~ap_sig_158)) begin
        img_out_data_stream_V4_write = 1'b1;
    end else begin
        img_out_data_stream_V4_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        img_out_data_stream_V_blk_n = img_out_data_stream_V_full_n;
    end else begin
        img_out_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & ~ap_sig_158)) begin
        img_out_data_stream_V_write = 1'b1;
    end else begin
        img_out_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~ap_sig_72) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~ap_sig_102) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            if (~ap_sig_158) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st6_fsm_5 : begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_102 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (img_in_data_stream_V_empty_n == 1'b0) | (img_in_data_stream_V1_empty_n == 1'b0) | (img_in_data_stream_V2_empty_n == 1'b0));
end

always @ (*) begin
    ap_sig_116 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_125 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_134 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_158 = ((img_out_data_stream_V_full_n == 1'b0) | (img_out_data_stream_V3_full_n == 1'b0) | (img_out_data_stream_V4_full_n == 1'b0));
end

always @ (*) begin
    ap_sig_24 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_72 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_sig_78 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_89 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

assign exitcond_flatten_fu_208_p2 = ((indvar_flatten_reg_161 == ap_const_lv21_1FA3FF) ? 1'b1 : 1'b0);

assign grp_fu_216_p0 = grp_fu_216_p00;

assign grp_fu_216_p00 = tmp_15_reg_231;

assign grp_fu_216_p1 = ap_const_lv14_1D;

assign grp_fu_223_p0 = grp_fu_223_p00;

assign grp_fu_223_p00 = tmp_17_reg_241;

assign grp_fu_223_p1 = ap_const_lv16_4D;

assign img_out_data_stream_V3_din = {{grp_fu_223_p3[ap_const_lv32_F : ap_const_lv32_8]}};

assign img_out_data_stream_V4_din = {{grp_fu_223_p3[ap_const_lv32_F : ap_const_lv32_8]}};

assign img_out_data_stream_V_din = {{grp_fu_223_p3[ap_const_lv32_F : ap_const_lv32_8]}};

assign indvar_flatten_next_fu_202_p2 = (indvar_flatten_reg_161 + ap_const_lv21_1);

assign p_Val2_1_fu_178_p0 = p_Val2_1_fu_178_p00;

assign p_Val2_1_fu_178_p00 = tmp_16_reg_236;

assign p_Val2_1_fu_178_p2 = (p_Val2_1_fu_178_p0 * $signed('h96));

always @ (posedge ap_clk) begin
    p_Val2_1_reg_246[0] <= 1'b0;
end

endmodule //filter_gray2RGB67
