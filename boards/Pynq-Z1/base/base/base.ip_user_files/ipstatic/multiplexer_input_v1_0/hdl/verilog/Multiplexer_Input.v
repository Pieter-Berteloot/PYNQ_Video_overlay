// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Multiplexer_Input,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=9.470000,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=151,HLS_SYN_LUT=120}" *)

module Multiplexer_Input (
        ap_clk,
        ap_rst_n,
        in_data_TDATA,
        in_data_TVALID,
        in_data_TREADY,
        in_data_TUSER,
        in_data_TLAST,
        out_data0_TDATA,
        out_data0_TVALID,
        out_data0_TREADY,
        out_data0_TUSER,
        out_data0_TLAST,
        out_data1_TDATA,
        out_data1_TVALID,
        out_data1_TREADY,
        out_data1_TUSER,
        out_data1_TLAST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        control,
        ap_rst_n_control
);

parameter    ap_ST_pp0_stg0_fsm_0 = 1'b1;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv16_96 = 16'b10010110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv16_4D = 16'b1001101;
parameter    ap_const_lv14_1D = 14'b11101;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input  [23:0] in_data_TDATA;
input   in_data_TVALID;
output   in_data_TREADY;
input  [0:0] in_data_TUSER;
input  [0:0] in_data_TLAST;
output  [7:0] out_data0_TDATA;
output   out_data0_TVALID;
input   out_data0_TREADY;
output  [0:0] out_data0_TUSER;
output  [0:0] out_data0_TLAST;
output  [23:0] out_data1_TDATA;
output   out_data1_TVALID;
input   out_data1_TREADY;
output  [0:0] out_data1_TUSER;
output  [0:0] out_data1_TLAST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
input   control;
input   ap_rst_n_control;

reg in_data_TREADY;
reg out_data0_TVALID;
reg out_data1_TVALID;

reg    ap_rst_n_inv;
wire   [7:0] mode;
reg   [7:0] mode_0_data_reg;
reg    mode_0_vld_reg;
reg    mode_0_ack_out;
reg    in_data_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_0;
reg    ap_sig_56;
reg    ap_reg_ppiten_pp0_it1;
reg    ap_reg_ppiten_pp0_it2;
reg    ap_reg_ppiten_pp0_it3;
reg    out_data0_TDATA_blk_n;
reg   [0:0] tmp_1_reg_304;
reg   [0:0] ap_reg_ppstg_tmp_1_reg_304_pp0_iter2;
reg    out_data1_TDATA_blk_n;
reg   [0:0] tmp_3_reg_308;
reg   [0:0] ap_reg_ppstg_tmp_3_reg_308_pp0_iter2;
reg    ap_rst_n_control_inv;
reg   [23:0] out_data1_data_tmp_reg_272;
reg    ap_sig_ioackin_out_data1_TREADY;
reg    ap_sig_ioackin_out_data0_TREADY;
reg   [23:0] ap_reg_ppstg_out_data1_data_tmp_reg_272_pp0_iter1;
reg   [23:0] ap_reg_ppstg_out_data1_data_tmp_reg_272_pp0_iter2;
reg   [0:0] inUser_V_reg_277;
reg   [0:0] ap_reg_ppstg_inUser_V_reg_277_pp0_iter1;
reg   [0:0] ap_reg_ppstg_inUser_V_reg_277_pp0_iter2;
reg   [0:0] inLast_V_reg_283;
reg   [0:0] ap_reg_ppstg_inLast_V_reg_283_pp0_iter1;
reg   [0:0] ap_reg_ppstg_inLast_V_reg_283_pp0_iter2;
wire   [7:0] loc_V_fu_142_p1;
reg   [7:0] loc_V_reg_289;
reg   [7:0] ap_reg_ppstg_loc_V_reg_289_pp0_iter1;
reg   [7:0] loc_V_1_reg_294;
reg   [7:0] loc_V_2_reg_299;
reg   [7:0] ap_reg_ppstg_loc_V_2_reg_299_pp0_iter1;
reg   [7:0] ap_reg_ppstg_loc_V_2_reg_299_pp0_iter2;
wire   [0:0] tmp_1_fu_166_p2;
wire   [0:0] tmp_3_fu_172_p2;
wire   [15:0] p_Val2_1_fu_181_p2;
reg   [15:0] p_Val2_1_reg_312;
wire   [15:0] grp_fu_265_p3;
reg   [15:0] p_Val2_2_reg_317;
reg    ap_reg_ioackin_out_data1_TREADY;
reg    ap_reg_ioackin_out_data0_TREADY;
wire   [7:0] p_Val2_1_fu_181_p0;
wire   [15:0] grp_fu_255_p3;
wire   [0:0] tmp_fu_202_p3;
wire   [7:0] p_Val2_5_fu_193_p4;
wire   [7:0] tmp_5_fu_209_p1;
wire   [7:0] p_Val2_6_fu_220_p2;
wire   [0:0] tmp_2_fu_213_p3;
wire   [0:0] tmp_4_fu_226_p3;
wire   [0:0] p_Result_2_not_fu_234_p2;
wire   [0:0] not_carry_fu_240_p2;
wire   [7:0] grp_fu_255_p0;
wire   [7:0] grp_fu_255_p1;
wire   [7:0] grp_fu_265_p0;
wire   [5:0] grp_fu_265_p1;
reg   [0:0] ap_NS_fsm;
wire    ap_sig_pprstidle_pp0;
wire   [15:0] grp_fu_255_p00;
wire   [13:0] grp_fu_265_p00;
wire   [15:0] p_Val2_1_fu_181_p00;

// power-on initialization
initial begin
#0 mode_0_data_reg = 8'b00000000;
#0 mode_0_vld_reg = 1'b0;
#0 ap_CS_fsm = 1'b1;
#0 ap_reg_ppiten_pp0_it1 = 1'b0;
#0 ap_reg_ppiten_pp0_it2 = 1'b0;
#0 ap_reg_ppiten_pp0_it3 = 1'b0;
#0 ap_reg_ioackin_out_data1_TREADY = 1'b0;
#0 ap_reg_ioackin_out_data0_TREADY = 1'b0;
end

Multiplexer_Input_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
Multiplexer_Input_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .mode(mode),
    .clk(control),
    .rst(ap_rst_n_control_inv)
);

Multiplexer_Input_mac_muladd_8ns_8ns_16ns_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
Multiplexer_Input_mac_muladd_8ns_8ns_16ns_16_1_U0(
    .din0(grp_fu_255_p0),
    .din1(grp_fu_255_p1),
    .din2(p_Val2_2_reg_317),
    .dout(grp_fu_255_p3)
);

Multiplexer_Input_mac_muladd_8ns_6ns_16ns_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
Multiplexer_Input_mac_muladd_8ns_6ns_16ns_16_1_U1(
    .din0(grp_fu_265_p0),
    .din1(grp_fu_265_p1),
    .din2(p_Val2_1_reg_312),
    .dout(grp_fu_265_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_out_data0_TREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_reg_ppiten_pp0_it3) & ~(ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & ~(((1'b1 == 1'b1) & (in_data_TVALID == 1'b0)) | ((1'b1 == ap_reg_ppiten_pp0_it3) & (((ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & ~(1'b0 == ap_reg_ppstg_tmp_3_reg_308_pp0_iter2) & (1'b0 == ap_sig_ioackin_out_data1_TREADY)) | (~(ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & (1'b0 == ap_sig_ioackin_out_data0_TREADY))))))) begin
            ap_reg_ioackin_out_data0_TREADY <= 1'b0;
        end else if (((1'b1 == ap_reg_ppiten_pp0_it3) & ~(ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & ~((1'b1 == 1'b1) & (in_data_TVALID == 1'b0)) & (1'b1 == out_data0_TREADY))) begin
            ap_reg_ioackin_out_data0_TREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_out_data1_TREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_reg_ppiten_pp0_it3) & (ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & ~(1'b0 == ap_reg_ppstg_tmp_3_reg_308_pp0_iter2) & ~(((1'b1 == 1'b1) & (in_data_TVALID == 1'b0)) | ((1'b1 == ap_reg_ppiten_pp0_it3) & (((ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & ~(1'b0 == ap_reg_ppstg_tmp_3_reg_308_pp0_iter2) & (1'b0 == ap_sig_ioackin_out_data1_TREADY)) | (~(ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & (1'b0 == ap_sig_ioackin_out_data0_TREADY))))))) begin
            ap_reg_ioackin_out_data1_TREADY <= 1'b0;
        end else if (((1'b1 == ap_reg_ppiten_pp0_it3) & (ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & ~(1'b0 == ap_reg_ppstg_tmp_3_reg_308_pp0_iter2) & ~((1'b1 == 1'b1) & (in_data_TVALID == 1'b0)) & (1'b1 == out_data1_TREADY))) begin
            ap_reg_ioackin_out_data1_TREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & ~(((1'b1 == 1'b1) & (in_data_TVALID == 1'b0)) | ((1'b1 == ap_reg_ppiten_pp0_it3) & (((ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & ~(1'b0 == ap_reg_ppstg_tmp_3_reg_308_pp0_iter2) & (1'b0 == ap_sig_ioackin_out_data1_TREADY)) | (~(ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & (1'b0 == ap_sig_ioackin_out_data0_TREADY))))))) begin
            ap_reg_ppiten_pp0_it1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= 1'b0;
    end else begin
        if (~(((1'b1 == 1'b1) & (in_data_TVALID == 1'b0)) | ((1'b1 == ap_reg_ppiten_pp0_it3) & (((ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & ~(1'b0 == ap_reg_ppstg_tmp_3_reg_308_pp0_iter2) & (1'b0 == ap_sig_ioackin_out_data1_TREADY)) | (~(ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & (1'b0 == ap_sig_ioackin_out_data0_TREADY)))))) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it3 <= 1'b0;
    end else begin
        if (~(((1'b1 == 1'b1) & (in_data_TVALID == 1'b0)) | ((1'b1 == ap_reg_ppiten_pp0_it3) & (((ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & ~(1'b0 == ap_reg_ppstg_tmp_3_reg_308_pp0_iter2) & (1'b0 == ap_sig_ioackin_out_data1_TREADY)) | (~(ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & (1'b0 == ap_sig_ioackin_out_data0_TREADY)))))) begin
            ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & ~(((1'b1 == 1'b1) & (in_data_TVALID == 1'b0)) | ((1'b1 == ap_reg_ppiten_pp0_it3) & (((ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & ~(1'b0 == ap_reg_ppstg_tmp_3_reg_308_pp0_iter2) & (1'b0 == ap_sig_ioackin_out_data1_TREADY)) | (~(ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & (1'b0 == ap_sig_ioackin_out_data0_TREADY))))))) begin
        ap_reg_ppstg_inLast_V_reg_283_pp0_iter1 <= inLast_V_reg_283;
        ap_reg_ppstg_inUser_V_reg_277_pp0_iter1 <= inUser_V_reg_277;
        ap_reg_ppstg_loc_V_2_reg_299_pp0_iter1 <= loc_V_2_reg_299;
        ap_reg_ppstg_loc_V_reg_289_pp0_iter1 <= loc_V_reg_289;
        ap_reg_ppstg_out_data1_data_tmp_reg_272_pp0_iter1 <= out_data1_data_tmp_reg_272;
        inLast_V_reg_283 <= in_data_TLAST;
        inUser_V_reg_277 <= in_data_TUSER;
        loc_V_1_reg_294 <= {{in_data_TDATA[ap_const_lv32_F : ap_const_lv32_8]}};
        loc_V_2_reg_299 <= {{in_data_TDATA[ap_const_lv32_17 : ap_const_lv32_10]}};
        loc_V_reg_289 <= loc_V_fu_142_p1;
        out_data1_data_tmp_reg_272 <= in_data_TDATA;
        tmp_1_reg_304 <= tmp_1_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if (~(((1'b1 == 1'b1) & (in_data_TVALID == 1'b0)) | ((1'b1 == ap_reg_ppiten_pp0_it3) & (((ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & ~(1'b0 == ap_reg_ppstg_tmp_3_reg_308_pp0_iter2) & (1'b0 == ap_sig_ioackin_out_data1_TREADY)) | (~(ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & (1'b0 == ap_sig_ioackin_out_data0_TREADY)))))) begin
        ap_reg_ppstg_inLast_V_reg_283_pp0_iter2 <= ap_reg_ppstg_inLast_V_reg_283_pp0_iter1;
        ap_reg_ppstg_inUser_V_reg_277_pp0_iter2 <= ap_reg_ppstg_inUser_V_reg_277_pp0_iter1;
        ap_reg_ppstg_loc_V_2_reg_299_pp0_iter2 <= ap_reg_ppstg_loc_V_2_reg_299_pp0_iter1;
        ap_reg_ppstg_out_data1_data_tmp_reg_272_pp0_iter2 <= ap_reg_ppstg_out_data1_data_tmp_reg_272_pp0_iter1;
        ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 <= tmp_1_reg_304;
        ap_reg_ppstg_tmp_3_reg_308_pp0_iter2 <= tmp_3_reg_308;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == 1'b1) & (1'b0 == mode_0_vld_reg)) | ((1'b1 == 1'b1) & (1'b1 == mode_0_vld_reg) & (1'b1 == mode_0_ack_out)))) begin
        mode_0_data_reg <= mode;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & ~(((1'b1 == 1'b1) & (in_data_TVALID == 1'b0)) | ((1'b1 == ap_reg_ppiten_pp0_it3) & (((ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & ~(1'b0 == ap_reg_ppstg_tmp_3_reg_308_pp0_iter2) & (1'b0 == ap_sig_ioackin_out_data1_TREADY)) | (~(ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & (1'b0 == ap_sig_ioackin_out_data0_TREADY))))) & ~(1'b0 == tmp_1_fu_166_p2))) begin
        p_Val2_1_reg_312[15 : 1] <= p_Val2_1_fu_181_p2[15 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_reg_ppiten_pp0_it2) & ~(((1'b1 == 1'b1) & (in_data_TVALID == 1'b0)) | ((1'b1 == ap_reg_ppiten_pp0_it3) & (((ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & ~(1'b0 == ap_reg_ppstg_tmp_3_reg_308_pp0_iter2) & (1'b0 == ap_sig_ioackin_out_data1_TREADY)) | (~(ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & (1'b0 == ap_sig_ioackin_out_data0_TREADY))))) & ~(tmp_1_reg_304 == 1'b0))) begin
        p_Val2_2_reg_317 <= grp_fu_265_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & ~(((1'b1 == 1'b1) & (in_data_TVALID == 1'b0)) | ((1'b1 == ap_reg_ppiten_pp0_it3) & (((ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & ~(1'b0 == ap_reg_ppstg_tmp_3_reg_308_pp0_iter2) & (1'b0 == ap_sig_ioackin_out_data1_TREADY)) | (~(ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & (1'b0 == ap_sig_ioackin_out_data0_TREADY))))) & (1'b0 == tmp_1_fu_166_p2))) begin
        tmp_3_reg_308 <= tmp_3_fu_172_p2;
    end
end

always @ (*) begin
    if (ap_sig_56) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_out_data0_TREADY)) begin
        ap_sig_ioackin_out_data0_TREADY = out_data0_TREADY;
    end else begin
        ap_sig_ioackin_out_data0_TREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_out_data1_TREADY)) begin
        ap_sig_ioackin_out_data1_TREADY = out_data1_TREADY;
    end else begin
        ap_sig_ioackin_out_data1_TREADY = 1'b1;
    end
end

assign ap_sig_pprstidle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b1 == 1'b1))) begin
        in_data_TDATA_blk_n = in_data_TVALID;
    end else begin
        in_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b1 == 1'b1) & ~(((1'b1 == 1'b1) & (in_data_TVALID == 1'b0)) | ((1'b1 == ap_reg_ppiten_pp0_it3) & (((ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & ~(1'b0 == ap_reg_ppstg_tmp_3_reg_308_pp0_iter2) & (1'b0 == ap_sig_ioackin_out_data1_TREADY)) | (~(ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & (1'b0 == ap_sig_ioackin_out_data0_TREADY))))))) begin
        in_data_TREADY = 1'b1;
    end else begin
        in_data_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b1 == 1'b1) & ~(((1'b1 == 1'b1) & (in_data_TVALID == 1'b0)) | ((1'b1 == ap_reg_ppiten_pp0_it3) & (((ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & ~(1'b0 == ap_reg_ppstg_tmp_3_reg_308_pp0_iter2) & (1'b0 == ap_sig_ioackin_out_data1_TREADY)) | (~(ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & (1'b0 == ap_sig_ioackin_out_data0_TREADY))))))) begin
        mode_0_ack_out = 1'b1;
    end else begin
        mode_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_reg_ppiten_pp0_it3) & ~(ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0))) begin
        out_data0_TDATA_blk_n = out_data0_TREADY;
    end else begin
        out_data0_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_reg_ppiten_pp0_it3) & ~(ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & ~((1'b1 == 1'b1) & (in_data_TVALID == 1'b0)) & (1'b0 == ap_reg_ioackin_out_data0_TREADY))) begin
        out_data0_TVALID = 1'b1;
    end else begin
        out_data0_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_reg_ppiten_pp0_it3) & (ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & ~(1'b0 == ap_reg_ppstg_tmp_3_reg_308_pp0_iter2))) begin
        out_data1_TDATA_blk_n = out_data1_TREADY;
    end else begin
        out_data1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_reg_ppiten_pp0_it3) & (ap_reg_ppstg_tmp_1_reg_304_pp0_iter2 == 1'b0) & ~(1'b0 == ap_reg_ppstg_tmp_3_reg_308_pp0_iter2) & ~((1'b1 == 1'b1) & (in_data_TVALID == 1'b0)) & (1'b0 == ap_reg_ioackin_out_data1_TREADY))) begin
        out_data1_TVALID = 1'b1;
    end else begin
        out_data1_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_pp0_stg0_fsm_0 : begin
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_rst_n_control_inv = ~ap_rst_n_control;
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

always @ (*) begin
    ap_sig_56 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

assign grp_fu_255_p0 = grp_fu_255_p00;

assign grp_fu_255_p00 = ap_reg_ppstg_loc_V_2_reg_299_pp0_iter2;

assign grp_fu_255_p1 = ap_const_lv16_4D;

assign grp_fu_265_p0 = grp_fu_265_p00;

assign grp_fu_265_p00 = ap_reg_ppstg_loc_V_reg_289_pp0_iter1;

assign grp_fu_265_p1 = ap_const_lv14_1D;

assign loc_V_fu_142_p1 = in_data_TDATA[7:0];

assign not_carry_fu_240_p2 = (tmp_4_fu_226_p3 | p_Result_2_not_fu_234_p2);

assign out_data0_TDATA = ((not_carry_fu_240_p2[0:0] === 1'b1) ? p_Val2_6_fu_220_p2 : ap_const_lv8_FF);

assign out_data0_TLAST = ap_reg_ppstg_inLast_V_reg_283_pp0_iter2;

assign out_data0_TUSER = ap_reg_ppstg_inUser_V_reg_277_pp0_iter2;

assign out_data1_TDATA = ap_reg_ppstg_out_data1_data_tmp_reg_272_pp0_iter2;

assign out_data1_TLAST = ap_reg_ppstg_inLast_V_reg_283_pp0_iter2;

assign out_data1_TUSER = ap_reg_ppstg_inUser_V_reg_277_pp0_iter2;

assign p_Result_2_not_fu_234_p2 = (tmp_2_fu_213_p3 ^ 1'b1);

assign p_Val2_1_fu_181_p0 = p_Val2_1_fu_181_p00;

assign p_Val2_1_fu_181_p00 = loc_V_1_reg_294;

assign p_Val2_1_fu_181_p2 = (p_Val2_1_fu_181_p0 * $signed('h96));

assign p_Val2_5_fu_193_p4 = {{grp_fu_255_p3[ap_const_lv32_F : ap_const_lv32_8]}};

assign p_Val2_6_fu_220_p2 = (p_Val2_5_fu_193_p4 + tmp_5_fu_209_p1);

assign tmp_1_fu_166_p2 = ((mode_0_data_reg == ap_const_lv8_0) ? 1'b1 : 1'b0);

assign tmp_2_fu_213_p3 = grp_fu_255_p3[ap_const_lv32_F];

assign tmp_3_fu_172_p2 = ((mode_0_data_reg == ap_const_lv8_1) ? 1'b1 : 1'b0);

assign tmp_4_fu_226_p3 = p_Val2_6_fu_220_p2[ap_const_lv32_7];

assign tmp_5_fu_209_p1 = tmp_fu_202_p3;

assign tmp_fu_202_p3 = grp_fu_255_p3[ap_const_lv32_7];

always @ (posedge ap_clk) begin
    p_Val2_1_reg_312[0] <= 1'b0;
end

endmodule //Multiplexer_Input
